#!/bin/bash

# Simple deployment script to configure Docker-based environments for Drupal sites.

function katli_help {
echo -e "

deploy for kafei katli

Simple deployment script to configure Docker-based environments for Drupal sites.

Usage:
 ./deploy <sitename>          # brings you into a console

Setup:
 ./deploy <sitename> new      # creates folders and files for your site
 ./deploy <sitename> init d7  # create a settings/<sitename>/settings.php for
                              # the site (do this after you cloned repo)
Boot:
 ./deploy <sitename> up       # starts up docker containers, shows logs
 ./deploy <sitename> down     # stop the containers

Work (run init before these, after checking out repo):
 ./deploy <sitename> si       # run the site installer
 ./deploy <sitename> db       # import the sql/<sitename>.sql.gz and
                              # sql/<sitename_legacy.sql.gz databases

Debug:
 ./deploy <sitename> xx       # delete the DB so you can run a fresh db import later
"
}

SITE=$1
MYSQL_PWD='my-secret-pw' # also change this value in docker-compose.yml
SALT=`date | shasum` # for Drupal 8. You may want to replace this if your OS does not have shasum installed.
KATLI_SHELL='php7' # if you have troubles with Drupal 7 use "php56"

# Docker now seems to like dynamic container names
D_PHP=`docker ps --format "{{.Names}}" --filter status=running|grep $SITE |grep $KATLI_SHELL`
D_DB=`docker ps --format "{{.Names}}" --filter status=running|grep $SITE |grep _db_`

if [[ "$2" == "help" || "$1" == "help" ]];
then
  katli_help;
  exit
fi

if [[ "$2" == "up" ]];
then
  COMPOSE_PROJECT_NAME=$1 docker-compose up
  exit
fi

if [[ "$2" == "down" ]];
then
  COMPOSE_PROJECT_NAME=$1 docker-compose stop
  exit
fi

# new site (creates placeholders only)
if [[ "$2" == "new" ]];
then
  mkdir -p repos/${SITE}
  mkdir -p files/${SITE}
  chmod 777 -R files/${SITE}
  mkdir -p config/${SITE}
  chmod 777 -R config/${SITE}
  echo
  echo "Checkout your files under repos/${SITE} then run ./deploy ${SITE} init d7."
  exit
fi

# init site (creates settings.php and services.yml)
if [[ "$2" == "init" ]];
then

  # remove old settings, copy fresh from defaults
  mkdir -p ./settings/${SITE}
  rm -Rf ./settings/${SITE}/settings.php
  rm -Rf ./settings/${SITE}/services.yml
  cp ./repos/${SITE}/sites/default/default.settings.php ./settings/${SITE}/settings.php
  cp ./repos/${SITE}/sites/default/default.services.yml ./settings/${SITE}/services.yml

  # drupal 7 specifics
  if [[ "$3" == "d7" ]];
  then
    echo "
\$databases['default']['default'] = array(
  'driver' => 'mysql',
  'database' => '${SITE}',
  'username' => 'root',
  'password' => '${MYSQL_PWD}',
  'host' => 'db',
  'prefix' => '',
);
\$conf['file_public_path'] = 'sites/default/files';
\$conf['file_temporary_path'] = '/tmp';
    " >> ./settings/${SITE}/settings.php
  fi

  # drupal 8 specifics
  if [[ "$3" == "d8" ]];
  then
    echo "
\$databases['default']['default'] = array (
  'database' => '${SITE}',
  'username' => 'root',
  'password' => '${MYSQL_PWD}',
  'prefix' => '',
  'host' => 'db',
  'port' => '3306',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
);
\$databases['migrate']['default'] = array (
  'database' => '${SITE}_legacy',
  'username' => 'root',
  'password' => '${MYSQL_PWD}',
  'prefix' => '',
  'host' => 'db',
  'port' => '3306',
  'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
  'driver' => 'mysql',
);
\$config_directories['sync'] = 'sites/default/config';
\$settings['hash_salt'] = '${SALT}';
    " >> ./settings/${SITE}/settings.php
    echo "NOTE: you will most certainly want to run ./deploy si next for Drupal 8 sites"
  fi
  if [[ -z "$3" ]];
  then
    echo
    echo "You did not specify d7 or d8 as your last parameter. You will have to conifgure your settings/${SITE}/settings.php manually or run this command again."
    echo "Databases: ${SITE} and ${SITE}_legacy"
    echo "username: root"
    echo "password: ${MYSQL_PWD}"
    echo "host: db"
  fi
  echo
  echo "Initialization complete, you may now use si/db commands."
  exit
fi

# delete DB
if [[ "$2" == "xx" ]];
then
  docker exec -t $D_DB /bin/bash -c "MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysqladmin -u root drop ${SITE} --force"
  docker exec -t $D_DB /bin/bash -c "MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysqladmin -u root drop ${SITE}_legacy --force"
fi

# make sure the DB always exists
docker exec -t $D_DB /bin/bash -c "MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysqladmin -u root create ${SITE}" 2>&1 >/dev/null
docker exec -t $D_DB /bin/bash -c "MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysqladmin -u root create ${SITE}_legacy" 2>&1 >/dev/null

# run site install with standard profile
if [[ "$2" == "si" ]];
then
  echo "Installing Drupal..."
  if [[ -a ./settings/${SITE}/settings.php ]]
  then
    echo "Running installer:"
    docker exec -t $D_PHP /bin/bash -c "cd /var/www/html && /usr/local/bin/drush si standard -y"
    echo "Login URL:"
    docker exec -t $D_PHP /bin/bash -c 'cd /var/www/html && drush uli'
  else
    echo "The settings.php file has not been created. Stop your docker instances and run ./deploy ${SITE} init d8 # or d7 if you wish"
  fi
  # @todo set settings.php and services.yml to 444
fi

# load the DB, and a legacy DB to import from if present
if [[ "$2" == "db" ]];
then
  if [[ -a ./sql/${SITE}.sql.gz ]]
  then
    echo "Importing db..."
    docker exec -t $D_DB /bin/bash -c "zcat /var/sql/${SITE}.sql.gz | MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysql -u root ${SITE}"
    echo "Running update hooks..."
    docker exec -t $D_PHP /bin/bash -c 'cd /var/www/html && drush updb'
    docker exec -t $D_PHP /bin/bash -c 'cd /var/www/html && drush cr'
    echo
    echo  "Make sure to revert features or drush cim now if appropriate <--"
    docker exec -t $D_PHP /bin/bash -c 'cd /var/www/html && drush uli'
  else
    echo "Could not find sql/${SITE}.sql.gz"
  fi
  if [[ -a ./sql/${SITE}_legacy.sql.gz ]]
  then
    echo "NOT Importing legacy..."
    #docker exec -t $D_DB /bin/bash -c "zcat /var/sql/${SITE}_legacy.sql.gz | MYSQL_PWD='${MYSQL_PWD}' /usr/bin/mysql -u root ${SITE}_legacy"
  else
    echo "Could not find sql/${SITE}_legacy.sql.gz you may need this if you are doing migrations."
  fi
fi

# show the user how to connect
echo
echo "PHP 7 Connect info:"
echo
echo "If hosted in Linux server is at: `docker inspect --format='{{range $p, $conf := .NetworkSettings.Networks}} {{$p}} -> {{$conf.IPAddress}} {{end}}' ${D_PHP}`"
echo "If hosted in a VM use your docker-machine or boot2docker IP and this port: `docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' ${SITE}_php7_1`"
echo
#echo "PHP 5.6 Connect info:"
#echo
#echo "If hosted in Linux server is at: `docker inspect --format='{{range $p, $conf := .NetworkSettings.Networks}} {{$p}} -> {{$conf.IPAddress}} {{end}}' ${SITE}_php56_1`"
#echo "If hosted in a VM use your docker-machine or boot2docker IP and this port: `docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' ${SITE}_php56_1`"

echo '
 ________________________________________ 
/ welcome to kafei katli!                \
| drush and drupal console are ready.    |
\ have fun! <3                           /
 ---------------------------------------- 
    \
     \
      \     
                    ##        .            
              ## ## ##       ==            
           ## ## ## ##      ===            
       /""""""""""""""""___/ ===        
  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   
       \______ o          __/            
        \    \        __/             
          \____\______/ '


# launch a console
# only go interactive if you have a shell, otherwise assume testing
# turns out it is hard to find interactive status so "not jenkins"
if [[ ! -v "JENKINS_VERSION" ]];
then
  docker exec -ti $D_PHP /bin/bash
fi
